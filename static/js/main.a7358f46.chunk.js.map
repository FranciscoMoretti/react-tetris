{"version":3,"sources":["img/bg.png","gameHelpers.js","components/styles/StyledTetris.js","hooks/useGameStatus.js","tetrominos.js","hooks/useStage.js","components/styles/StyledGrid.js","components/styles/StyledCell.js","components/Cell.js","components/Grid.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useNextPiece.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","createStage","Array","from","fill","createNextPieceBoard","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","clearedCount","reduce","acc","findIndex","prev","unshift","push","splice","sweepRowsRotateColumns","StyledStage","props","height","width","StyledNextPiece","StyledCell","type","React","memo","console","log","Stage","key","NextPiece","board","StyledDisplay","gameOver","Display","text","DisplayNext","next","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","nextTetromino","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","initPlayer","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","nextPieceBoard","setNextPieceBoard","newTetromino","updateNextPiece","useNextPiece","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","keyUp","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a7358f46.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\nexport const NEXT_PIECE_LENGTH = 4;\r\n\r\nexport const createStage = () =>\r\n    // Create empty grid\r\n    Array.from(Array(STAGE_HEIGHT), () =>\r\n        new Array(STAGE_WIDTH).fill([0, 'clear'])\r\n    )\r\n\r\nexport const createNextPieceBoard = () =>\r\n    // Create empty grid\r\n    Array.from(Array(NEXT_PIECE_LENGTH), () =>\r\n        new Array(NEXT_PIECE_LENGTH).fill([0])\r\n    )\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n    for (let y = 0; y < player.tetromino.length; y += 1) {\r\n        for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n            //1. check that we're on an actual tetromino cell\r\n            if (player.tetromino[y][x] !== 0) {\r\n                if (\r\n                    // 2. Check that our move is inside the game areas height (y)\r\n                    // we shouldn't go through the bottom of the play area\r\n                    !stage[y + player.pos.y + moveY] ||\r\n                    // 3. Cheeck that our move is inside the game areas width (x)\r\n                    !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n                    // 4. Check that the cell we're moving to isn't set to clear\r\n                    stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}","import styled from 'styled-components'\r\n\r\nimport bgImage from '../../img/bg.png'\r\n\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background: url(${bgImage}) #000;\r\n    background-size: cover;\r\n    overflow: hidden;\r\n `\r\n\r\nexport const StyledTetris = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    padding: 40;\r\n    margin: 0 auto;\r\n    max-width: 900px;\r\n\r\n    aside{\r\n        width: 100%;\r\n        max-width: 200px;\r\n        display: block;\r\n        padding: 0 20px;\r\n    }\r\n `","import { useState, useEffect, useCallback } from 'react';\r\n\r\n\r\nexport const useGameStatus = (rowsCleared) => {\r\n    const [score, setScore] = useState(0);\r\n    const [rows, setRows] = useState(0);\r\n    const [level, setLevel] = useState(0);\r\n\r\n    const linePoints = [40, 100, 300, 1200];\r\n\r\n    const calcScore = useCallback(() => {\r\n        // We have score\r\n        if (rowsCleared > 0) {\r\n            // This is how original Tetris score is calculated\r\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n            setRows(prev => prev + rowsCleared);\r\n        }\r\n    }, [level, linePoints, rowsCleared]);\r\n\r\n    useEffect(() => {\r\n        calcScore();\r\n    }, [calcScore, rowsCleared, score]);\r\n\r\n    return [score, setScore, rows, setRows, level, setLevel];\r\n}","export const TETROMINOS = {\r\n    0: { shape: [[0]], color: '0, 0, 0' },\r\n    I: {\r\n        shape: [\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n        ],\r\n        color: '80, 227, 230'\r\n    },\r\n    J: {\r\n        shape: [\r\n            [0, 'J', 0],\r\n            [0, 'J', 0],\r\n            ['J', 'J', 0],\r\n        ],\r\n        color: '36, 95, 223'\r\n    },\r\n    L: {\r\n        shape: [\r\n            [0, 'L', 0],\r\n            [0, 'L', 0],\r\n            [0, 'L', 'L'],\r\n        ],\r\n        color: '223, 173, 36'\r\n    },\r\n    O: {\r\n        shape: [\r\n            ['O', 'O'],\r\n            ['O', 'O'],\r\n        ],\r\n        color: '223, 217, 36'\r\n    },\r\n    S: {\r\n        shape: [\r\n            [0, 'S', 'S'],\r\n            ['S', 'S', 0],\r\n            [0, 0, 0],\r\n        ],\r\n        color: '48, 211, 56'\r\n    },\r\n    T: {\r\n        shape: [\r\n            [0, 0, 0],\r\n            ['T', 'T', 'T'],\r\n            [0, 'T', 0],\r\n        ],\r\n        color: '132, 61, 198'\r\n    },\r\n    Z: {\r\n        shape: [\r\n            ['Z', 'Z', 0],\r\n            [0, 'Z', 'Z'],\r\n            [0, 0, 0],\r\n        ],\r\n        color: '227, 78, 78'\r\n    },\r\n}\r\n\r\nexport const randomTetromino = () => {\r\n    const tetrominos = 'IJLOSTZ';\r\n    const randTetromino = tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n    return TETROMINOS[randTetromino];\r\n}","import { useState, useEffect } from 'react';\r\n\r\nimport { createStage } from '../gameHelpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n    const [stage, setStage] = useState(createStage());\r\n    const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setRowsCleared(0);\r\n\r\n        // TODO: optimize code\r\n        const sweepRowsRotateColumns = newStage => {\r\n            let clearedCount = 0;\r\n            newStage = newStage.reduce((acc, row) => {\r\n                if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n                    setRowsCleared(prev => prev + 1);\r\n                    clearedCount++;\r\n                    acc.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n                    return acc;\r\n                }\r\n                acc.push(row);\r\n                return acc;\r\n            }, []);\r\n            if (clearedCount > 0) {\r\n                newStage.forEach((row, y) => {\r\n                    row.unshift(...row.splice(-clearedCount));\r\n                });\r\n            }\r\n            return newStage;\r\n        };\r\n\r\n        const updateStage = prevStage => {\r\n            // First flush the stage\r\n            const newStage = prevStage.map(row =>\r\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\r\n            );\r\n\r\n            // Then draw the tetromino\r\n            player.tetromino.forEach((row, y) => {\r\n                row.forEach((value, x) => {\r\n                    if (value !== 0) {\r\n                        newStage[y + player.pos.y][x + player.pos.x] = [\r\n                            value,\r\n                            `${player.collided ? 'merged' : 'clear'}`,\r\n                        ];\r\n                    }\r\n                });\r\n            });\r\n            // Then check if we collided\r\n            if (player.collided) {\r\n                resetPlayer();\r\n                return sweepRowsRotateColumns(newStage);\r\n            }\r\n\r\n            return newStage;\r\n        };\r\n\r\n        setStage(prev => updateStage(prev))\r\n\r\n    }, [player, resetPlayer, rowsCleared])\r\n\r\n    return [stage, setStage, rowsCleared];\r\n}","import styled from 'styled-components'\r\n\r\nexport const StyledStage = styled.div`\r\n    display: grid;\r\n    grid-template-rows:repeat(\r\n        ${props => props.height},\r\n        calc(25vw /${props => props.width} )\r\n    );\r\n    grid-template-columns:repeat(${props => props.width}, 1fr);\r\n    grid-gap: 1px;\r\n    border: 2px solid #333;\r\n    width: 100%;\r\n    max-width: 25vw;\r\n    background: #111;\r\n`;\r\n\r\nexport const StyledNextPiece = styled.div`\r\n    display: grid;\r\n    grid-template-rows:repeat(\r\n        ${props => props.height},\r\n        calc(5vw /${props => props.width} )\r\n    );\r\n    grid-template-columns:repeat(${props => props.width}, 1fr);\r\n    grid-gap: 1px;\r\n    border: 2px solid #333;\r\n    width: 100%;\r\n    max-width: 5vw;\r\n    background: #111;\r\n`;","import styled from 'styled-components'\r\n\r\nexport const StyledCell = styled.div`\r\n    width: auto;\r\n    background: rgba(${props => props.color}, 0.8);\r\n    border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\r\n    border-bottom-color: rgba(${props => props.color}, 0.1);\r\n    border-right-color: rgba(${props => props.color}, 1);\r\n    border-top-color: rgba(${props => props.color}, 1);\r\n    border-left-color: rgba(${props => props.color}, 0.3);\r\n`","import React from 'react';\r\nimport { StyledCell } from './styles/StyledCell';\r\nimport { TETROMINOS } from '../tetrominos';\r\n\r\nconst Cell = ({ type }) => (\r\n  <StyledCell type={type} color={TETROMINOS[type].color}> {console.log('re-render')}</StyledCell>\r\n)\r\n\r\nexport default React.memo(Cell);","import React from 'react';\r\nimport { StyledStage, StyledNextPiece } from './styles/StyledGrid'\r\n\r\nimport Cell from './Cell';\r\n\r\nexport const Stage = ({ stage }) => (\r\n    <StyledStage width={stage[0].length} height={stage.length}>\r\n        {stage.map(row => row.map((cell, x) =>\r\n            <Cell key={x} type={cell[0]} />\r\n        ))}\r\n    </StyledStage>\r\n)\r\n\r\nexport const NextPiece = ({ board }) => (\r\n    <StyledNextPiece width={board[0].length} height={board.length}>\r\n        {board.map(row => row.map((cell, x) =>\r\n            <Cell key={x} type={cell[0]} />\r\n        ))}\r\n    </StyledNextPiece>\r\n)\r\n\r\n\r\n","import styled from 'styled-components'\r\n\r\nexport const StyledDisplay = styled.div`\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    border: 4px solid #333;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    color: ${props => (props.gameOver ? 'red' : '#999')};\r\n    background: #000;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size: 0.8rem\r\n`;","import React from 'react';\r\nimport { StyledDisplay } from './styles/StyledDisplay';\r\nimport { NextPiece } from './Grid';\r\n\r\nexport const Display = ({ gameOver, text }) => (\r\n    <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n)\r\nexport const DisplayNext = ({ text, next }) => (\r\n    <StyledDisplay>\r\n        {text}\r\n        <NextPiece board={next} />\r\n    </StyledDisplay>\r\n)\r\n","import styled from 'styled-components'\r\n\r\nexport const StyledStartButton = styled.button`\r\n    box-sizing: border-box;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    border: none;\r\n    color: white;\r\n    background: #333;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size: 1rem;\r\n    outline: none;\r\n    cursor: pointer;\r\n`;","import React from 'react';\r\nimport { StyledStartButton } from './styles/StyledStartButton'\r\n\r\n\r\nconst StartButton = ({ callback }) => (\r\n    <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n)\r\n\r\nexport default StartButton;","import React, { useState } from 'react';\r\n\r\nimport { checkCollision, createStage } from '../gameHelpers';\r\n\r\n// Styled Components\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris'\r\n\r\n// Custom Hooks\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\nimport { useNextPiece } from '../hooks/useNextPiece';\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage';\r\n\r\n// Components\r\nimport { Stage } from './Grid';\r\nimport { Display, DisplayNext } from './Display';\r\nimport StartButton from './StartButton';\r\n\r\n\r\nconst Tetris = () => {\r\n    const [dropTime, setDropTime] = useState(null);\r\n    const [gameOver, setGameOver] = useState(false);\r\n\r\n    const [player, updatePlayerPos, initPlayer, resetPlayer, playerRotate] = usePlayer();\r\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n    const [nextPieceBoard] = useNextPiece(player.nextTetromino);\r\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\r\n        rowsCleared);\r\n\r\n    console.log('re-render');\r\n\r\n    const movePlayer = dir => {\r\n        if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n            updatePlayerPos({ x: dir, y: 0 });\r\n        }\r\n    }\r\n\r\n    const startGame = () => {\r\n        //Reset everything\r\n        setStage(createStage());\r\n        setDropTime(1000);\r\n        initPlayer();\r\n        setGameOver(false);\r\n        setScore(0);\r\n        setRows(0);\r\n        setLevel(0);\r\n    }\r\n\r\n    const drop = () => {\r\n        // Increaase level when player has cleared 10 rows\r\n        if (rows > (level + 1) * 10) {\r\n            setLevel(prev => prev + 1);\r\n            // Also increase speed (custom calculation)\r\n            setDropTime(100 / (level + 1) + 200);\r\n        }\r\n\r\n        if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n            updatePlayerPos({ x: 0, y: 1, collided: false });\r\n        } else {\r\n            // Game Overy\r\n            if (player.pos.y < 1) {\r\n                console.log(\"GAME OVER!!!\");\r\n                setGameOver(true);\r\n                setDropTime(null);\r\n            }\r\n            updatePlayerPos({ x: 0, y: 0, collided: true });\r\n        }\r\n    }\r\n\r\n    const keyUp = ({ keyCode }) => {\r\n        if (!gameOver) {\r\n            if (keyCode === 40) {\r\n                console.log(\"interval on\")\r\n                setDropTime(100 / (level + 1) + 200);\r\n            }\r\n        }\r\n    }\r\n\r\n    const dropPlayer = () => {\r\n        console.log(\"interval off\");\r\n        setDropTime(null);\r\n        drop();\r\n    }\r\n\r\n    const move = ({ keyCode }) => {\r\n        if (!gameOver) {\r\n            if (keyCode === 37) { //left\r\n                movePlayer(-1);\r\n            } else if (keyCode === 39) { //right\r\n                movePlayer(1);\r\n            } else if (keyCode === 40) { //down\r\n                dropPlayer();\r\n            } else if (keyCode === 38) { //up\r\n                playerRotate(stage, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    useInterval(() => {\r\n        drop();\r\n    }, dropTime)\r\n\r\n    return (\r\n        <StyledTetrisWrapper\r\n            role=\"button\"\r\n            tabIndex=\"0\"\r\n            onKeyDown={e => move(e)}\r\n            onKeyUp={e => keyUp(e)}\r\n        >\r\n            <StyledTetris>\r\n                <Stage stage={stage} />\r\n                <aside>\r\n                    {gameOver ? (\r\n                        <Display gameOver={gameOver} text=\"Game Over\" />\r\n                    ) : (\r\n                            <div>\r\n                                <Display text={`Score: ${score}`} />\r\n                                <Display text={`Rows: ${rows}`} />\r\n                                <Display text={`Level: ${level}`} />\r\n                                <DisplayNext text={\"Next: \"} next={nextPieceBoard} />\r\n                            </div>\r\n                        )}\r\n                    <StartButton callback={startGame} />\r\n                </aside>\r\n            </StyledTetris>\r\n        </StyledTetrisWrapper >\r\n    );\r\n}\r\n\r\nexport default Tetris;","import { useState, useCallback } from 'react';\r\n\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\r\n\r\nexport const usePlayer = () => {\r\n    const [player, setPlayer] = useState({\r\n        pos: { x: 0, y: 0 },\r\n        tetromino: TETROMINOS[0].shape,\r\n        nextTetromino: TETROMINOS[0].shape,\r\n        collided: false,\r\n    });\r\n\r\n    const updatePlayerPos = ({ x, y, collided }) => {\r\n        setPlayer(prev => ({\r\n            ...prev,\r\n            pos: {\r\n                x: (prev.pos.x += x), y: (prev.pos.y += y),\r\n            },\r\n            collided,\r\n        }))\r\n    }\r\n\r\n    const rotate = (matrix, dir) => {\r\n        // Make the rows to become cols (transpose)\r\n        const rotatedTetro = matrix.map((_, index) =>\r\n            matrix.map(col => col[index]),\r\n        );\r\n        // Reverse each row to get a rotated matrix\r\n        if (dir > 0) return rotatedTetro.map(row => row.reverse())\r\n        return rotatedTetro.reverse();\r\n    }\r\n\r\n    const playerRotate = (stage, dir) => {\r\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n        const pos = clonedPlayer.pos.x;\r\n        let offset = 1;\r\n        while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n            clonedPlayer.pos.x += offset;\r\n            offset = -(offset + (offset > 0 ? 1 : -1));\r\n            if (offset > clonedPlayer.tetromino[0].length) {\r\n                rotate(clonedPlayer.tetromino, -dir);\r\n                clonedPlayer.pos.x = pos;\r\n                return;\r\n            }\r\n        }\r\n\r\n        setPlayer(clonedPlayer);\r\n    }\r\n\r\n    const resetPlayer = useCallback(\r\n        () => {\r\n            setPlayer({\r\n                pos: {\r\n                    x: STAGE_WIDTH / 2 - 2, y: 0\r\n                },\r\n                tetromino: [...player.nextTetromino],\r\n                nextTetromino: randomTetromino().shape,\r\n                collided: false,\r\n            })\r\n        }, [player.nextTetromino])\r\n\r\n    const initPlayer = useCallback(\r\n        () => {\r\n            setPlayer({\r\n                pos: {\r\n                    x: STAGE_WIDTH / 2 - 2, y: 0\r\n                },\r\n                tetromino: randomTetromino().shape,\r\n                nextTetromino: randomTetromino().shape,\r\n                collided: false,\r\n            })\r\n        }, [])\r\n\r\n    return [player, updatePlayerPos, initPlayer, resetPlayer, playerRotate];\r\n\r\n}","import { useState, useEffect } from 'react';\r\n\r\nimport { createNextPieceBoard } from '../gameHelpers';\r\n\r\n\r\nexport const useNextPiece = (nextTetromino) => {\r\n    const [nextPieceBoard, setNextPieceBoard] = useState(createNextPieceBoard());\r\n\r\n    useEffect(() => {\r\n        const updateNextPiece = (newTetromino) => {\r\n            // First flush the stage\r\n            const newStage = createNextPieceBoard();\r\n\r\n            // Then draw the tetromino\r\n            newTetromino.forEach((row, y) => {\r\n                row.forEach((value, x) => {\r\n                    if (value !== 0) {\r\n                        newStage[y][x] = [\r\n                            value,\r\n                        ];\r\n                    }\r\n                });\r\n            });\r\n            return newStage;\r\n        }\r\n\r\n        setNextPieceBoard(updateNextPiece(nextTetromino));\r\n\r\n    }, [nextTetromino])\r\n\r\n    return [nextPieceBoard];\r\n}","import { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n}\r\n","import React from 'react';\r\nimport Tetris from './components/Tetris';\r\n\r\nconst App = () => (\r\n  <div className=\"App\">\r\n    <Tetris />\r\n  </div>\r\n)\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}